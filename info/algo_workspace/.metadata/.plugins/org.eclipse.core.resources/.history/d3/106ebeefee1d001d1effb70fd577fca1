package swea_ps;

import java.io.*;
import java.util.*;

public class p5644_무선충전 {
	static int m, a;
	static int dx[] = {0,0,1,0,-1};
	static int dy[] = {0,-1,0,1, 0};
	static int a_move[];
	static int b_move[];
	static int board[][];
	static List<int[]> charger;
	static List<Integer>[][] charger_list;
	static boolean visited[][];
	static int lim;
	
	
	static void dfs(int x, int y,int cnt, int battery) {
		
		
		if(cnt == lim) {
			
			
			return;
		}
		
		visited[y][x]= true;
		charger_list[y][x].add(battery);
		
		for(int i =1; i <= 4; i++) {
			int nextx = x + dx[i];
			int nexty = y + dy[i];
			
			if(nextx < 1 || nexty < 1 || nextx > 10 || nexty > 10)
				continue;
			
			if(!visited[nexty][nextx]) {
				dfs(nextx,nexty,cnt+1, battery);
			}
			
		}
		
		
		
		
	}
	

	public static void main(String[] args) throws IOException{
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int tc = Integer.parseInt(br.readLine());
		
		for(int t = 1; t <=tc; t++) {
			
			st = new StringTokenizer(br.readLine()," ");
			
			m = Integer.parseInt(st.nextToken());
			a = Integer.parseInt(st.nextToken());
			
			st = new StringTokenizer(br.readLine()," ");
			
			a_move = new int[20];
			b_move = new int[20];
			for(int i=0; i <m;i++) {
				a_move[i] = Integer.parseInt(st.nextToken());
			}
			
			st = new StringTokenizer(br.readLine()," ");
			for(int i=0; i <m;i++) {
				b_move[i] = Integer.parseInt(st.nextToken());
			}
			
			
			board = new int[11][11];
			charger = new ArrayList<int[]>();
			
			for(List<Integer> a[] : charger_list) {
				
				for(List<Integer> b : a) {
					b = new ArrayList<>();
				}
			}
			
			
			for(int i = 0; i < a; i++) {
				st = new StringTokenizer(br.readLine()," ");
				int x = Integer.parseInt(st.nextToken());
				int y = Integer.parseInt(st.nextToken());
				int dist = Integer.parseInt(st.nextToken());
				int power = Integer.parseInt(st.nextToken());
				
				charger.add(new int[] {x,y,dist,power});
				
				visited = new boolean[11][11];
				lim = dist;
				
				// 2차원 List에 dfs를 통해 충전가능한 핸드폰의 리스트를 담아둔다.
				dfs(x,y,0,i); // i 번째 배터리라는 뜻
				
			}
			
			// 입력 끝
			// 이동 시작
			
			int a_x = 1;
			int a_y = 1;
			int b_x = 10;
			int b_y = 10;
			int a_sum = 0;
			int b_sum = 0;
			
			// 먼저 a와 b의 현재위치에서의 충전기 리스트를 뽑는다.
			int best_power_a = 0;
			int best_power_b = 0;
			for(int i=0; i< charger_list[a_y][a_x].size(); i++) {
				//제일 충전량이 높은 충전기의 충전기를 뽑는다
				int charger_idx = charger_list[a_y][a_x].get(i);
				int cur_charger_power = charger.get(charger_idx)[3];
				best_power_a = Math.max(best_power_a, cur_charger_power);
				
			}
			for(int i=0; i< charger_list[b_y][b_x].size(); i++) {
				//제일 충전량이 높은 충전기의 충전기를 뽑는다
				int charger_idx = charger_list[a_y][a_x].get(i);
				int cur_charger_power = charger.get(charger_idx)[3];
				best_power_b = Math.max(best_power_b, cur_charger_power);
			}
			
			
			// 초기 위치부터 충전이 가능하다.
			for(int i = 0; i < m; i++) {
				
				
				
				
				
				
				
				
			}
					
			
			
			
			
		}
		
	}

}
