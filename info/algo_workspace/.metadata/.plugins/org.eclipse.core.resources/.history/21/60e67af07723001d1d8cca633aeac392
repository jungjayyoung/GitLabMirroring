package boj;

import java.io.*;
import java.util.*;

// 3: 22
public class p16236 {
	static int n;
	static int[][] board;
	static int dx[] = {-1,0,1,0};
	static int dy[] = {0,1,0,-1};
	static int[][] visited;
	static Queue<int[]> q = new ArrayDeque<int[]>();
	int ans = 0;
	
	static void bfs() {
		
		
		while(!q.isEmpty()) {
			
			int tmp[] = q.poll();
			int x = tmp[0];
			int y = tmp[1];
			int second = tmp[2]; // 시간이자 거리
			int cur_size = tmp[3];
			
			
			
			for(int i = 0; i < 4; i++) {
				int nextx = x + dx[i];
				int nexty = y + dy[i];
				
				if(nextx < 0 || nexty <0 || nextx >=n || nexty >=n) continue;
				
				if(cur_size < board[nexty][nextx]) continue;
				
				if(cur_size == board[nexty][nextx]) {
					q.offer(new int[] {nextx,nexty,second+1,cur_size});
				}
				
			}
			
			
		}
		
		
		
		
	}

	public static void main(String[] args) throws IOException{

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		board = new int[n+1][n+1];
		visited = new int[n+1][n+1];
		
		for(int y = 0; y <n; y++) {
			
			st = new StringTokenizer(br.readLine()," ");
			for(int x = 0; x <n; x++) {
				board[y][x] = Integer.parseInt(st.nextToken());
				if(board[y][x] == 9) {
					q.offer(new int[] {x,y,0,2});
				}
			}
		}
		
		bfs();
		
		
		
		
		
	}

}
