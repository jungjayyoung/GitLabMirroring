import java.util.;
import java.io.;
public class main{
    static int r,c,d_y,d_x;
    static char[][] board;
    static boolean[][] visited,water_visited;
    static final int[] dy= {1,-1,0,0},dx= {0,0,1,-1};
    static void water(int curY,int curX) {
        Queue<int[]> q=new ArrayDeque<>();
        q.offer(new int[] {curY,curX});
        while(!q.isEmpty()) {
            int[] cur=q.poll();
            curY=cur[0];curX=cur[1];
            for(int i=0; i<4; i++) {
                int nxtY=curY+dy[i],nxtX=curX+dx[i];
                if(nxtY<0|| nxtY>=r|| nxtX<0|| nxtX>=c|| water_visited[nxtY][nxtX]) continue;
                if(board[nxtY][nxtX]=='') {
                    water_visited[nxtY][nxtX]=true;
                    q.offer(new int[] {nxtY,nxtX});
                }else if(board[nxtY][nxtX]=='.') {
                    board[nxtY][nxtX]='';
                    water_visited[nxtY][nxtX]=true;
                }
            }
        }
    }
    public static void main(String args[]) throws Exception{
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb=new StringBuilder();
        StringTokenizer st=new StringTokenizer(in.readLine(), " ");
        r=Integer.parseInt(st.nextToken());c=Integer.parseInt(st.nextToken());
        board=new char[r][c];
        visited=new boolean[r][c];
        Queue<int[]> sq=new ArrayDeque<>();
        for(int i=0; i<r; i++) {
            String line=in.readLine();
            for(int j=0; j<c; j++) {
                board[i][j]=line.charAt(j);
                if(board[i][j]=='S') {
                    visited[i][j]=true;
                    sq.offer(new int[] {i,j,0});
                }else if(board[i][j]=='D') {
                    d_y=i;d_x=j;
                }
            }
        }
        code:while(true) {
            water_visited=new boolean[r][c];
            for(int i=0; i<r; i++) {
                for(int j=0; j<c; j++) {
                    if(board[i][j]=='*'&& !water_visited[i][j]) water(i,j);
                }
            }
            int[] cur=sq.poll();
            int curY=cur[0],curX=cur[1],curdist=cur[2];
            for(int i=0; i<4; i++) {
                int nxtY=curY+dy[i],nxtX=curX+dx[i];
                if(nxtY<0|| nxtY>=r|| nxtX<0|| nxtX>=c|| visited[nxtY][nxtX]) continue;
                if(board[nxtY][nxtX]=='D') {
                    sb.append(curdist+1);
                    break code;
                }
                else if(board[nxtY][nxtX]=='.') {
                    visited[nxtY][nxtX]=true;
                    sq.offer(new int[] {nxtY,nxtX,curdist+1});
                }
            }
            if(sq.isEmpty()) {
                sb.append("KAKTUS");
                break;
            }
        }
        System.out.println(sb);
        in.close();
    }
}